{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"2018 Season Onsite Online Name Rank Solved A B C D E F G H I J K L M N 2018 Multi-University Training Contest 1 137/941 5/11 O O O O . . . \u00d8 \u00d8 . . O - - 2018 Multi-University Training Contest 2 97/821 3/11 . . . O \u00d8 \u00d8 O . . O - - - - 2018 Multi-University Training Contest 3 118/938 5/13 O . O O . O \u00d8 . . . . O . - 2018 Multi-University Training Contest 4 116/934 5/12 . O . O O . . . . . O O - - 2018 Multi-University Training Contest 5 58/938 3/12 . O . . O . O . . . . . - - 2018 Multi-University Training Contest 6 91/938 4/12 O . O . . . . . O . . O - - 2018 Multi-University Training Contest 7 58/938 5/11 O . . . O . . O \u00d8 O O - - - 2018 Multi-University Training Contest 8 88/941 4/12 O ! . O O . . . . O . . - - 2017 Season Note O for passing during the contest . for having not attempted yet \u00d8 for passing after the contest ! for attempted but failed","title":"Home"},{"location":"#2018-season","text":"","title":"2018 Season"},{"location":"#onsite","text":"","title":"Onsite"},{"location":"#online","text":"Name Rank Solved A B C D E F G H I J K L M N 2018 Multi-University Training Contest 1 137/941 5/11 O O O O . . . \u00d8 \u00d8 . . O - - 2018 Multi-University Training Contest 2 97/821 3/11 . . . O \u00d8 \u00d8 O . . O - - - - 2018 Multi-University Training Contest 3 118/938 5/13 O . O O . O \u00d8 . . . . O . - 2018 Multi-University Training Contest 4 116/934 5/12 . O . O O . . . . . O O - - 2018 Multi-University Training Contest 5 58/938 3/12 . O . . O . O . . . . . - - 2018 Multi-University Training Contest 6 91/938 4/12 O . O . . . . . O . . O - - 2018 Multi-University Training Contest 7 58/938 5/11 O . . . O . . O \u00d8 O O - - - 2018 Multi-University Training Contest 8 88/941 4/12 O ! . O O . . . . O . . - -","title":"Online"},{"location":"#2017-season","text":"Note O for passing during the contest . for having not attempted yet \u00d8 for passing after the contest ! for attempted but failed","title":"2017 Season"},{"location":"2018_Multi-University_Training_Contest_1/","text":"2018 Multi-University Training Contest 1 A.Maximum Multiple Solved by ghk.0:28(+) 1 = \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{6} = \\frac{1}{3} + \\frac{1}{3} + \\frac{1}{3} = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{4} 1 = \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{6} = \\frac{1}{3} + \\frac{1}{3} + \\frac{1}{3} = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{4} \u8ba8\u8bba\u88ab 3 3 \u548c 4 4 \u6574\u9664\u7684\u60c5\u51b5\u3002 B.Balanced Sequence Solved by jjm.3:04(+3) \u4e32\u5185\u7684\u5148\u5904\u7406\u4e00\u4e0b\uff0c\u6d88\u9664\u6389\u3002 \u4e32\u4e0e\u4e32\u4e4b\u95f4\u7528\u4e00\u79cd\u8d2a\u5fc3\u7684\u62fc\u63a5\u65b9\u5f0f\uff0c\u76f8\u5f53\u4e8e ( \u4e3a0\uff0c ) \u4e3a1\uff0c\u6c42\u4e00\u4e2a\u6700\u5c0f\u7684\u5b57\u5178\u5e8f\u3002 C.Triangle Partition Solved by ghk.0:48(+) \u6ca1\u6709\u4e09\u70b9\u5171\u7ebf\u7684\u60c5\u51b5\uff0c\u6392\u5b8c\u5e8f\u4e4b\u540e\u968f\u4fbf\u53d6\u3002 D.Distinct Values Solved by ghk.1:45(+2) \u533a\u95f4\u6392\u5e8f\uff0c\u5904\u7406\u5305\u542b\u7684\u533a\u95f4\uff0c\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u53ef\u53d6\u7684\u503c\uff0c\u53cc\u6307\u9488\u626b\u4e00\u904d\u3002 G.Chiaki Sequence Revisited Upsolved by ghk. \u53bb\u9664\u7b2c1\u9879\uff0c {a_n} {a_n} \u7684\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684\u9879\u90fd\u51fa\u73b0\u4e86 lowbit(x)+1 \u6b21\uff0c\u5373\u5448\u73b0(1,1),(2,2),(3,1),(4,3)\u7684\u5f62\u5f0f\u3002(a,b)\u8868\u793aa\u51fa\u73b0\u4e86b\u6b21\u3002 \u8003\u8651\u679a\u4e3e\u51fa\u73b0i\u6b21\u7684\u6570\u5217\uff0c {1,3,5,7,...} {1,3,5,7,...} \u3001 {2,6,10,...} {2,6,10,...} ...\u5448\u73b0\u4e3a\u7b49\u5dee\u6570\u5217\u5f62\u5f0f\uff0c\u53ef\u4ee5 \\log \\log \u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u51fa$ 1 ~ k $\u7684\u548c\u3002 \u4e8c\u5206\u6c42\u51fa\u6700\u5927\u7684\u51fa\u73b0\u6ee1\u7684k\uff0c sum = calc(k) + rest sum = calc(k) + rest \u3002 H.RMQ Similar Sequence Upsolved by ghk. \u53ea\u9700\u8981\u7b1b\u5361\u5c14\u6811\u957f\u5f97\u4e00\u6837\u5c31\u884c\u4e86\uff0c\u7136\u540e\u6c42\u4e00\u4e0b \\prod \\frac{1}{sz_i} \\prod \\frac{1}{sz_i} \uff0c\u7531\u4e8e v_i \\in (0,1) v_i \\in (0,1) \uff0c res=\\frac{n}{2} \\prod \\frac{1}{sz_i} res=\\frac{n}{2} \\prod \\frac{1}{sz_i} K.Time Zone Solved by jjm.1:03(+3) \u6a21\u62df","title":"2018_Multi-University_Training_Contest_1"},{"location":"2018_Multi-University_Training_Contest_1/#2018-multi-university-training-contest-1","text":"","title":"2018 Multi-University Training Contest 1"},{"location":"2018_Multi-University_Training_Contest_1/#amaximum-multiple","text":"Solved by ghk.0:28(+) 1 = \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{6} = \\frac{1}{3} + \\frac{1}{3} + \\frac{1}{3} = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{4} 1 = \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{6} = \\frac{1}{3} + \\frac{1}{3} + \\frac{1}{3} = \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{4} \u8ba8\u8bba\u88ab 3 3 \u548c 4 4 \u6574\u9664\u7684\u60c5\u51b5\u3002","title":"A.Maximum Multiple"},{"location":"2018_Multi-University_Training_Contest_1/#bbalanced-sequence","text":"Solved by jjm.3:04(+3) \u4e32\u5185\u7684\u5148\u5904\u7406\u4e00\u4e0b\uff0c\u6d88\u9664\u6389\u3002 \u4e32\u4e0e\u4e32\u4e4b\u95f4\u7528\u4e00\u79cd\u8d2a\u5fc3\u7684\u62fc\u63a5\u65b9\u5f0f\uff0c\u76f8\u5f53\u4e8e ( \u4e3a0\uff0c ) \u4e3a1\uff0c\u6c42\u4e00\u4e2a\u6700\u5c0f\u7684\u5b57\u5178\u5e8f\u3002","title":"B.Balanced Sequence"},{"location":"2018_Multi-University_Training_Contest_1/#ctriangle-partition","text":"Solved by ghk.0:48(+) \u6ca1\u6709\u4e09\u70b9\u5171\u7ebf\u7684\u60c5\u51b5\uff0c\u6392\u5b8c\u5e8f\u4e4b\u540e\u968f\u4fbf\u53d6\u3002","title":"C.Triangle Partition"},{"location":"2018_Multi-University_Training_Contest_1/#ddistinct-values","text":"Solved by ghk.1:45(+2) \u533a\u95f4\u6392\u5e8f\uff0c\u5904\u7406\u5305\u542b\u7684\u533a\u95f4\uff0c\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u53ef\u53d6\u7684\u503c\uff0c\u53cc\u6307\u9488\u626b\u4e00\u904d\u3002","title":"D.Distinct Values"},{"location":"2018_Multi-University_Training_Contest_1/#gchiaki-sequence-revisited","text":"Upsolved by ghk. \u53bb\u9664\u7b2c1\u9879\uff0c {a_n} {a_n} \u7684\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684\u9879\u90fd\u51fa\u73b0\u4e86 lowbit(x)+1 \u6b21\uff0c\u5373\u5448\u73b0(1,1),(2,2),(3,1),(4,3)\u7684\u5f62\u5f0f\u3002(a,b)\u8868\u793aa\u51fa\u73b0\u4e86b\u6b21\u3002 \u8003\u8651\u679a\u4e3e\u51fa\u73b0i\u6b21\u7684\u6570\u5217\uff0c {1,3,5,7,...} {1,3,5,7,...} \u3001 {2,6,10,...} {2,6,10,...} ...\u5448\u73b0\u4e3a\u7b49\u5dee\u6570\u5217\u5f62\u5f0f\uff0c\u53ef\u4ee5 \\log \\log \u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u51fa$ 1 ~ k $\u7684\u548c\u3002 \u4e8c\u5206\u6c42\u51fa\u6700\u5927\u7684\u51fa\u73b0\u6ee1\u7684k\uff0c sum = calc(k) + rest sum = calc(k) + rest \u3002","title":"G.Chiaki Sequence Revisited"},{"location":"2018_Multi-University_Training_Contest_1/#hrmq-similar-sequence","text":"Upsolved by ghk. \u53ea\u9700\u8981\u7b1b\u5361\u5c14\u6811\u957f\u5f97\u4e00\u6837\u5c31\u884c\u4e86\uff0c\u7136\u540e\u6c42\u4e00\u4e0b \\prod \\frac{1}{sz_i} \\prod \\frac{1}{sz_i} \uff0c\u7531\u4e8e v_i \\in (0,1) v_i \\in (0,1) \uff0c res=\\frac{n}{2} \\prod \\frac{1}{sz_i} res=\\frac{n}{2} \\prod \\frac{1}{sz_i}","title":"H.RMQ Similar Sequence"},{"location":"2018_Multi-University_Training_Contest_1/#ktime-zone","text":"Solved by jjm.1:03(+3) \u6a21\u62df","title":"K.Time Zone"},{"location":"Y2018/","text":"test Test a ^ b a ^ b d ^ { \\frac{2}{3} } d ^ { \\frac{2}{3} } \\cdot \\cdot #include bits/stdc++.h using namespace std ; int main () { } #include bits/stdc++.h using namespace std; int main() { } print Hello, world! \ud83d\ude10 ddd ddd","title":"test"},{"location":"Y2018/#test","text":"","title":"test"},{"location":"Y2018/#test_1","text":"a ^ b a ^ b d ^ { \\frac{2}{3} } d ^ { \\frac{2}{3} } \\cdot \\cdot #include bits/stdc++.h using namespace std ; int main () { } #include bits/stdc++.h using namespace std; int main() { } print Hello, world! \ud83d\ude10 ddd ddd","title":"Test"},{"location":"highlight/","text":"Highlight.js Highlight.js is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn\u2019t depend on any framework and has automatic language detection. Getting Started The bare minimum for using highlight.js on a web page is linking to the library along with one of the styles and calling initHighlightingOnLoad : link rel = stylesheet href = /path/to/styles/default.css script src = /path/to/highlight.pack.js / script script hljs . initHighlightingOnLoad (); / script This will find and highlight code inside of pre code tags; it tries to detect the language automatically. If automatic detection doesn\u2019t work for you, you can specify the language in the class attribute: pre code class = html ... / code / pre The list of supported language classes is available in the class reference . Classes can also be prefixed with either language- or lang- . To disable highlighting altogether use the nohighlight class: pre code class = nohighlight ... / code / pre Custom Initialization When you need a bit more control over the initialization of highlight.js, you can use the highlightBlock and configure functions. This allows you to control what to highlight and when . Here\u2019s an equivalent way to calling initHighlightingOnLoad using jQuery: $ ( document ). ready ( function () { $ ( pre code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); }); You can use any tags instead of pre code to mark up your code. If you don't use a container that preserve line breaks you will need to configure highlight.js to use the br tag: hljs . configure ({ useBR : true }); $ ( div.code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); For other options refer to the documentation for configure . Web Workers You can run highlighting inside a web worker to avoid freezing the browser window while dealing with very big chunks of code. In your main script: addEventListener ( load , function () { var code = document . querySelector ( #code ); var worker = new Worker ( worker.js ); worker . onmessage = function ( event ) { code . innerHTML = event . data ; } worker . postMessage ( code . textContent ); }) In worker.js: onmessage = function ( event ) { importScripts ( path /highlight.pack.js ); var result = self . hljs . highlightAuto ( event . data ); postMessage ( result . value ); } Getting the Library You can get highlight.js as a hosted, or custom-build, browser script or as a server module. Right out of the box the browser script supports both AMD and CommonJS, so if you wish you can use RequireJS or Browserify without having to build from source. The server module also works perfectly fine with Browserify, but there is the option to use a build specific to browsers rather than something meant for a server. Head over to the download page for all the options. Don't link to GitHub directly. The library is not supposed to work straight from the source, it requires building. If none of the pre-packaged options work for you refer to the building documentation . The CDN-hosted package doesn't have all the languages. Otherwise it'd be too big. If you don't see the language you need in the \"Common\" section , it can be added manually: script src = //cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/go.min.js / script On Almond. You need to use the optimizer to give the module a name. For example: r.js -o name=hljs paths.hljs=/path/to/highlight out=highlight.js License Highlight.js is released under the BSD License. See LICENSE file for details. Links The official site for the library is at https://highlightjs.org/ . Further in-depth documentation for the API and other topics is at http://highlightjs.readthedocs.io/ . Authors and contributors are listed in the AUTHORS.en.txt file.","title":"Highlight.js"},{"location":"highlight/#highlightjs","text":"Highlight.js is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn\u2019t depend on any framework and has automatic language detection.","title":"Highlight.js"},{"location":"highlight/#getting-started","text":"The bare minimum for using highlight.js on a web page is linking to the library along with one of the styles and calling initHighlightingOnLoad : link rel = stylesheet href = /path/to/styles/default.css script src = /path/to/highlight.pack.js / script script hljs . initHighlightingOnLoad (); / script This will find and highlight code inside of pre code tags; it tries to detect the language automatically. If automatic detection doesn\u2019t work for you, you can specify the language in the class attribute: pre code class = html ... / code / pre The list of supported language classes is available in the class reference . Classes can also be prefixed with either language- or lang- . To disable highlighting altogether use the nohighlight class: pre code class = nohighlight ... / code / pre","title":"Getting Started"},{"location":"highlight/#custom-initialization","text":"When you need a bit more control over the initialization of highlight.js, you can use the highlightBlock and configure functions. This allows you to control what to highlight and when . Here\u2019s an equivalent way to calling initHighlightingOnLoad using jQuery: $ ( document ). ready ( function () { $ ( pre code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); }); You can use any tags instead of pre code to mark up your code. If you don't use a container that preserve line breaks you will need to configure highlight.js to use the br tag: hljs . configure ({ useBR : true }); $ ( div.code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); For other options refer to the documentation for configure .","title":"Custom Initialization"},{"location":"highlight/#web-workers","text":"You can run highlighting inside a web worker to avoid freezing the browser window while dealing with very big chunks of code. In your main script: addEventListener ( load , function () { var code = document . querySelector ( #code ); var worker = new Worker ( worker.js ); worker . onmessage = function ( event ) { code . innerHTML = event . data ; } worker . postMessage ( code . textContent ); }) In worker.js: onmessage = function ( event ) { importScripts ( path /highlight.pack.js ); var result = self . hljs . highlightAuto ( event . data ); postMessage ( result . value ); }","title":"Web Workers"},{"location":"highlight/#getting-the-library","text":"You can get highlight.js as a hosted, or custom-build, browser script or as a server module. Right out of the box the browser script supports both AMD and CommonJS, so if you wish you can use RequireJS or Browserify without having to build from source. The server module also works perfectly fine with Browserify, but there is the option to use a build specific to browsers rather than something meant for a server. Head over to the download page for all the options. Don't link to GitHub directly. The library is not supposed to work straight from the source, it requires building. If none of the pre-packaged options work for you refer to the building documentation . The CDN-hosted package doesn't have all the languages. Otherwise it'd be too big. If you don't see the language you need in the \"Common\" section , it can be added manually: script src = //cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/go.min.js / script On Almond. You need to use the optimizer to give the module a name. For example: r.js -o name=hljs paths.hljs=/path/to/highlight out=highlight.js","title":"Getting the Library"},{"location":"highlight/#license","text":"Highlight.js is released under the BSD License. See LICENSE file for details.","title":"License"},{"location":"highlight/#links","text":"The official site for the library is at https://highlightjs.org/ . Further in-depth documentation for the API and other topics is at http://highlightjs.readthedocs.io/ . Authors and contributors are listed in the AUTHORS.en.txt file.","title":"Links"},{"location":"highlight/CHANGES/","text":"Version 9.12.0 New language: MikroTik RouterOS Scripting language by Ivan Dementev . New style: VisualStudio 2015 Dark by Nicolas LLOBERA Improvements: Crystal updated with new keywords and syntaxes by Tsuyusato Kitsune . Julia updated to the modern definitions by Alex Arslan . julia-repl added by Morten Piibeleht . Stanislav Belov wrote a new definition for 1C , replacing the one that has not been updated for more than 8 years. The new version supports syntax for versions 7.7 and 8. Nicolas LLOBERA improved C# definition fixing edge cases with function titles detection and added highlighting of [Attributes] . nnnik provided a few correctness fixes for Autohotkey . Martin Clausen made annotation collections in Clojure to look consistently with other kinds. Alejandro Alonso updated Swift keywords. Version 9.11.0 New languages: Shell by Tsuyusato Kitsune jboss-cli by Rapha\u00ebl Parr\u00ebe Improvements: [Jo\u00ebl Porquet] has greatly improved the definition of makefile . C++ class titles are now highlighted as in other languages with classes. Jordi Petit added rarely used or , and and not keywords to C++ . Pieter Vantorre fixed highlighting of negative floating point values. Version 9.10.0 Apologies for missing the previous release cycle. Some thing just can't be automated\u2026 Anyway, we're back! New languages: Hy by Sergey Sobko Leaf by Hale Chan N1QL by Andres T\u00e4ht and Rene Saarsoo Improvements: Rust got updated with new keywords by Kasper Andersen and then significantly modernized even more by Eduard-Mihai Burtescu (yes, @eddyb, Rust core team member!) Python updated with f-literals by Philipp A . YAML updated with unquoted strings support. Gauss updated with new keywords by Matt Evans . Lua updated with new keywords by Joe Blow . Kotlin updated with new keywords by Philipp Hauer . TypeScript got highlighting of function params and updated keywords by Ike Ku . Scheme now correctly handles `-quoted lists thanks to Guannan Wei . Sam Wu fixed handling of in C++ defines. Version 9.9.0 New languages LLVM by Michael Rodler Improvements: TypeScript updated with annotations and param lists inside constructors, by Raphael Parree . CoffeeScript updated with new keywords and fixed to recognize JavaScript in ```, thanks to thanks to Geoffrey Booth . Compiler directives in Delphi are now correctly highlighted as \"meta\". Version 9.8.0 \"New York\" This version is the second one that deserved a name. Because I'm in New York, and the release isn't missing the deadline only because it's still Tuesday on West Coast. New languages: Clean by Camil Staps Flix by Magnus Madsen Improvements: Kenton Hamaluik did a comprehensive update for Haxe . New commands for PowerShell from Nicolas Le Gall . Jan T. Sott updated NSIS . Java and Swift support unicode characters in identifiers thanks to Alexander Lichter . Version 9.7.0 A comprehensive bugfix release. This is one of the best things about highlight.js: even boring things keep getting better (even if slow). VHDL updated with PSL keywords and uses more consistent styling. Nested C-style comments no longer break highlighting in many languages. JavaScript updated with = functions, highlighted object attributes and parsing within template string substitution blocks ( ${...} ). Fixed another corner case with self-closing tag/ in JSX. Added HEALTHCHECK directive in Docker. Delphi updated with new Free Pascal keywords. Fixed digit separator parsing in C++. C# updated with new keywords and fixed to allow multiple identifiers within generics ... . Fixed another slow regex in Less. Version 9.6.0 New languages: ABNF and EBNF by Alex McKibben Awk by Matthew Daly SubUnit by Sergey Bronnikov New styles: Atom One in both Dark and Light variants by Daniel Gamage Plus, a few smaller updates for Lasso , Elixir , C++ and SQL . Version 9.5.0 New languages: Excel by Victor Zhou Linden Scripting Language by Builder's Brewery TAP (Test Anything Protocol) by Sergey Bronnikov Pony by Joe Eli McIlvain Coq by Stephan Boyer dsconfig and LDIF by Jacob Childress New styles: Ocean Dark by Gavin Siu Notable changes: Minh Nguy\u1ec5n added more built-ins to Objective C. Jeremy Hull fixed corner cases in C++ preprocessor directives and Diff comments. Victor Zhou added support for digit separators in C++ numbers. Version 9.4.0 New languages: PureBASIC by Tristano Ajmone BNF by Oleg Efimov Ada by Lars Schulna New styles: PureBASIC by Tristano Ajmone Improvements to existing languages and styles: We now highlight function declarations in Go. Taisuke Fujimoto contributed very convoluted rules for raw and interpolated strings in C#. Boone Severson updated Verilog to comply with IEEE 1800-2012 SystemVerilog. Victor Zhou improved rules for comments and strings in PowerShell files. Janis Voigtl\u00e4nder updated the definition of Elm to version 0.17 of the languages. Elm is now featured on the front page of https://highlightjs.org . Special variable $this is highlighted as a keyword in PHP. usize and isize are now highlighted in Rust. Fixed labels and directives in x86 assembler. Version 9.3.0 New languages: Tagger Script by Philipp Wolfer MoonScript by Billy Quith New styles: xt256 by Herbert Shin Improvements to existing languages and styles: More robust handling of unquoted HTML tag attributes Relevance tuning for QML which was unnecessary eager at seizing other languages' code Improve GAMS language parsing Fixed a bunch of bugs around selectors in Less Kotlin's got a new definition for annotations, updated keywords and other minor improvements Added move to Rust keywords Markdown now recognizes ```-fenced code blocks Improved detection of function declarations in C++ and C# Version 9.2.0 New languages: QML by John Foster HTMLBars by Michael Johnston CSP by Taras Maxima by Robert Dodier New styles: Gruvbox by Qeole Dracula by Denis Ciccale Improvements to existing languages and styles: We now correctly handle JSX with arbitrary node tree depth. Argument list for (lambda) in Scheme is no longer highlighted as a function call. Stylus syntax doesn't break on valid CSS. More correct handling of comments and strings and other improvements for VimScript. More subtle work on the default style. We now use anonymous modules for AMD. macro_rules! is now recognized as a built-in in Rust. Version 9.1.0 New languages: Stan by Brendan Rocks BASIC by Rapha\u00ebl Ass\u00e9nat GAUSS by Matt Evans DTS by Martin Braun Arduino by Stefania Mellai New Styles: Arduino Light by Stefania Mellai Improvements to existing languages and styles: Handle return type annotations in Python Allow shebang headers in Javascript Support strings in Rust meta Recognize struct as a class-level definition in Rust Recognize b-prefixed chars and strings in Rust Better numbers handling in Verilog Version 9.0.0 The new major version brings a reworked styling system. Highlight.js now defines a limited set of highlightable classes giving a consistent result across all the styles and languages. You can read a more detailed explanation and background in the tracking issue that started this long process back in May. This change is backwards incompatible for those who uses highlight.js with a custom stylesheet. The new style guide explains how to write styles in this new world. Bundled themes have also suffered a significant amount of improvements and may look different in places, but all the things now consistent and make more sense. Among others, the Default style has got a refresh and will probably be tweaked some more in next releases. Please do give your feedback in our issue tracker . New languages in this release: Cach\u00e9 Object Script by Nikita Savchenko YAML by Stefan Wienert MIPS Assembler by Nebuleon Fumika HSP by prince Improvements to existing languages and styles: ECMAScript 6 modules import now do not require closing semicolon. ECMAScript 6 classes constructors now highlighted. Template string support for Typescript, as for ECMAScript 6. Scala case classes params highlight fixed. Built-in names introduced in Julia v0.4 added by Kenta Sato . Refreshed Default style. Other notable changes: Web workers support added bu Jan K\u00fchle . We now have tests for compressed browser builds as well. The building tool chain has been switched to node.js 4.x. and is now shamelessly uses ES6 features all over the place, courtesy of Jeremy Hull . License added to non-compressed browser build. Version 8.9.1 Some last-minute changes reverted due to strange bug with minified browser build: Scala case classes params highlight fixed ECMAScript 6 modules import now do not require closing semicolon ECMAScript 6 classes constructors now highlighted Template string support for Typescript, as for ECMAScript 6 License added to not minified browser build Version 8.9.0 New languages: crmsh by Kristoffer Gronlund SQF by Soren Enevoldsen Notable fixes and improvements to existing languages: Added abstract and namespace keywords to TypeScript by Daniel Rosenwasser Added label support to Dockerfile by Ladislav Prskavec Crystal highlighting improved by Tsuyusato Kitsune Missing Swift keywords added by Nate Cook Improve detection of C block comments Scala case classes params highlight fixed ECMAScript 6 modules import now do not require closing semicolon ECMAScript 6 classes constructors now highlighted Template string support for Typescript, as for ECMAScript 6 Other notable changes: License added to not minified browser build Version 8.8.0 New languages: Golo by Philippe Charri\u00e8re GAMS by Stefan Bechert IRPF90 by Anthony Scemama Access logs by Oleg Efimov Crystal by Tsuyusato Kitsune Notable fixes and improvements to existing languages: JavaScript highlighting no longer fails with ES6 default parameters Added keywords async and await to Python PHP heredoc support improved Allow preprocessor directives within C++ functions Other notable changes: Change versions to X.Y.Z SemVer-compatible format Added ability to build all targets at once Version 8.7 New languages: Zephir by Oleg Efimov Elm by Janis Voigtl\u00e4nder XQuery by Dirk Kirsten Mojolicious by Dotan Dimet AutoIt by Manh Tuan from J2TeaM Toml (ini extension) by Guillaume Gomez New styles: Hopscotch by Jan T. Sott Grayscale by MY Sun Notable fixes and improvements to existing languages: Fix encoding of images when copied over in certain builds Fix incorrect highlighting of the word \"bug\" in comments Treat decorators different from matrix multiplication in Python Fix traits inheritance highlighting in Rust Fix incorrect document Oracle keywords added to SQL language definition by Vadimtro Postgres keywords added to SQL language definition by Benjamin Auder Fix registers in x86asm being highlighted as a hex number Fix highlighting for numbers with a leading decimal point Correctly highlight numbers and strings inside of C/C++ macros C/C++ functions now support pointer, reference, and move returns Version 8.6 New languages: C/AL by Kenneth Fuglsang DNS zone file by Tim Schumacher Ceylon by Lucas Werkmeister OpenSCAD by Dan Panzarella Inform7 by Bruno Dias armasm by Dan Panzarella TP by Jay Strybis New styles: Atelier Cave , Atelier Estuary , Atelier Plateau and Atelier Savanna by Bram de Haan Github Gist by Louis Barranqueiro Notable fixes and improvements to existing languages: Multi-line raw strings from C++11 are now supported Fix class names with dashes in HAML The async keyword from ES6/7 is now supported TypeScript functions handle type and parameter complexity better We unified phpdoc/javadoc/yardoc etc modes across all languages CSS .class selectors relevance was dropped to prevent wrong language detection Images is now included to CDN build Release process is now automated Version 8.5 New languages: pf.conf by Peter Piwowarski Julia by Kenta Sato Prolog by Raivo Laanemets Docker by Alexis H\u00e9naut Fortran by Anthony Scemama and Thomas Applencourt Kotlin by Sergey Mashkov New styles: Agate by Taufik Nurrohman Darcula by [JetBrains][] Atelier Sulphurpool by Bram de Haan Android Studio by Pedro Oliveira Notable fixes and improvements to existing languages: ES6 features in JavaScript are better supported now by Gu Yiling . Swift now recognizes body-less method definitions. Single expression functions def foo, do: ... now work in Elixir. More uniform detection of built-in classes in Objective C. Fixes for number literals and processor directives in Rust. HTML script tag now allows any language, not just JavaScript. Multi-line comments are supported now in MatLab. Version 8.4 We've got the new demo page ! The obvious new feature is the new look, but apart from that it's got smarter: by presenting languages in groups it avoids running 10000 highlighting attempts after first load which was slowing it down and giving bad overall impression. It is now also being generated from test code snippets so the authors of new languages don't have to update both tests and the demo page with the same thing. Other notable changes: The template_comment class is gone in favor of the more general comment . Number parsing unified and improved across languages. C++, Java and C# now use unified grammar to highlight titles in function/method definitions. The browser build is now usable as an AMD module, there's no separate build target for that anymore. OCaml has got a comprehensive overhaul by Micka\u00ebl Delahaye . Clojure's data structures and literals are now highlighted outside of lists and we can now highlight Clojure's REPL sessions. New languages: AspectJ by Hakan \u00d6zler STEP Part 21 by Adam Joseph Cook SML derived by Edwin Dalorzo from OCaml definition Mercury by mucaho Smali by Dennis Titze Verilog by Jon Evans Stata by Brian Quistorff Version 8.3 We streamlined our tool chain, it is now based entirely on node.js instead of being a mix of node.js, Python and Java. The build script options and arguments remained the same, and we've noted all the changes in the documentation . Apart from reducing complexity, the new build script is also faster from not having to start Java machine repeatedly. The credits for the work go to Jeremy Hull . Some notable fixes: PHP and JavaScript mixed in HTML now live happily with each other. JavaScript regexes now understand ES6 flags \"u\" and \"y\". throw keyword is no longer detected as a method name in Java. Fixed parsing of numbers and symbols in Clojure thanks to input from Ivan Kleshnin . New languages in this release: Less by Max Mikhailov Stylus by Bryant Williams Tcl by Radek Liska Puppet by Jose Molina Colmenero Processing by Erik Paluka Twig templates by Luke Holder PowerShell by David Mohundro , based on the work of Nicholas Blumhardt XL by Christophe de Dinechin LiveScript by Taneli Vatanen and Jen Evers-Corvina ERB (Ruby in HTML) by Lucas Mazza Roboconf by Vincent Zurczak Version 8.2 We've finally got real tests and continuous testing on Travis thanks to Jeremy Hull and Chris Eidhof . The tests designed to cover everything: language detection, correct parsing of individual language features and various special cases. This is a very important change that gives us confidence in extending language definitions and refactoring library core. We're going to redesign the old demo/test suite into an interactive demo web app. If you're confident front-end developer or designer and want to help us with it, drop a comment into the issue on GitHub. As usually there's a handful of new languages in this release: Groovy by Guillaume Laforge Dart by Maxim Dikun Dust by Michael Allen Scheme by JP Verkamp G-Code by Adam Joseph Cook Q from Kx Systems by Sergey Vidyuk Other improvements: Erik Osheim heavily reworked Scala definitions making it richer. Lucas Mazza fixed Ruby hashes highlighting Lisp variants (Lisp, Clojure and Scheme) are unified in regard to naming the first symbol in parentheses: it's \"keyword\" in general case and also \"built_in\" for built-in functions in Clojure and Scheme. Version 8.1 New languages: Gherkin by Sam Pikesley Elixir by Josh Adams NSIS by Jan T. Sott VIM script by Jun Yang Protocol Buffers by Dan Tao Nix by Domen Ko\u017ear x86asm by innocenat Cap\u2019n Proto and Thrift by Oleg Efimov Monkey by Arthur Bikmullin TypeScript by Panu Horsmalahti Nimrod by Flaviu Tamas Gradle by Damian Mee Haxe by Christopher Kaster Swift by Chris Eidhof and Nate Cook New styles: Kimbie , light and dark variants by Jan T. Sott Color brewer by Fabr\u00edcio Tavares de Oliveira Codepen.io embed by Justin Perry Hybrid by Nic West Other improvements: The README is heavily reworked and brought up to date by Jeremy Hull . Added listLanguages() method in the API. Improved C/C++/C# detection. Added a bunch of new language aliases, documented the existing ones. Thanks to Sindre Sorhus for background research. Added phrasal English words to boost relevance in comments. Many improvements to SQL definition made by Heiko August , Nikolay Lisienko and Travis Odom . The shorter lang- prefix for language names in HTML classes supported alongside language- . Thanks to Jeff Escalante . Ruby's got support for interactive console sessions. Thanks to Pascal Hurni . Added built-in functions for R language. Thanks to Artem A. Klevtsov . Rust's got definition for lifetime parameters and improved string syntax. Thanks to Roman Shmatov . Various improvements to Objective-C definition by Matt Diephouse . Fixed highlighting of generics in Java. Version 8.0 This new major release is quite a big overhaul bringing both new features and some backwards incompatible changes. However, chances are that the majority of users won't be affected by the latter: the basic scenario described in the README is left intact. Here's what did change in an incompatible way: We're now prefixing all classes located in CSS classes reference with hljs- , by default, because some class names would collide with other people's stylesheets. If you were using an older version, you might still want the previous behavior, but still want to upgrade. To suppress this new behavior, you would initialize like so: script type = text/javascript hljs . configure ({ classPrefix : }); hljs . initHighlightingOnLoad (); / script tabReplace and useBR that were used in different places are also unified into the global options object and are to be set using configure(options) . This function is documented in our API docs . Also note that these parameters are gone from highlightBlock and fixMarkup which are now also rely on configure . We removed public-facing (though undocumented) object hljs.LANGUAGES which was used to register languages with the library in favor of two new methods: registerLanguage and getLanguage . Both are documented in our API docs . Result returned from highlight and highlightAuto no longer contains two separate attributes contributing to relevance score, relevance and keyword_count . They are now unified in relevance . Another technically compatible change that nonetheless might need attention: The structure of the NPM package was refactored, so if you had installed it locally, you'll have to update your paths. The usual require('highlight.js') works as before. This is contributed by Dmitry Smolin . New features: Languages now can be recognized by multiple names like \"js\" for JavaScript or \"html\" for, well, HTML (which earlier insisted on calling it \"xml\"). These aliases can be specified in the class attribute of the code container in your HTML as well as in various API calls. For now there are only a few very common aliases but we'll expand it in the future. All of them are listed in the class reference . Language detection can now be restricted to a subset of languages relevant in a given context \u2014 a web page or even a single highlighting call. This is especially useful for node.js build that includes all the known languages. Another example is a StackOverflow-style site where users specify languages as tags rather than in the markdown-formatted code snippets. This is documented in the API reference (see methods highlightAuto and configure ). Language definition syntax streamlined with variants and beginKeywords . New languages and styles: Oxygene by Carlo Kok Mathematica by Daniel Kvasni\u010dka Autohotkey by Seongwon Lee Atelier family of styles in 10 variants by Bram de Haan Para\u00edso styles by Jan T. Sott Miscellaneous improvements: Highlighting = prompts in Clojure. Jeremy Hull fixed a lot of styles for consistency. Finally, highlighting PHP and HTML mixed in peculiar ways . Objective C and C# now properly highlight titles in method definition. Big overhaul of relevance counting for a number of languages. Please do report bugs about mis-detection of non-trivial code snippets! Version 7.5 A catch-up release dealing with some of the accumulated contributions. This one is probably will be the last before the 8.0 which will be slightly backwards incompatible regarding some advanced use-cases. One outstanding change in this version is the addition of 6 languages to the hosted script : Markdown, ObjectiveC, CoffeeScript, Apache, Nginx and Makefile. It now weighs about 6K more but we're going to keep it under 30K. New languages: OCaml by Mehdi Dogguy and Nicolas Braud-Santoni LiveCode Server by Ralf Bitter Scilab by Sylvestre Ledru basic support for Makefile by Ivan Sagalaev Improvements: Ruby's got support for characters like ?A , ?1 , ?\\012 etc. and %r{..} regexps. Clojure now allows a function call in the beginning of s-expressions (($filter myCount ) (arr 1 2 3 4 5)) . Haskell's got new keywords and now recognizes more things like pragmas, preprocessors, modules, containers, FFIs etc. Thanks to Zena Treep for the implementation and to Jeremy Hull for guiding it. Miscellaneous fixes in PHP, Brainfuck, SCSS, Asciidoc, CMake, Python and F#. New core developers The latest long period of almost complete inactivity in the project coincided with growing interest to it led to a decision that now seems completely obvious: we need more core developers. So without further ado let me welcome to the core team two long-time contributors: Jeremy Hull and Oleg Efimov . Hope now we'll be able to work through stuff faster! P.S. The historical commit is here for the record. Version 7.4 This long overdue version is a snapshot of the current source tree with all the changes that happened during the past year. Sorry for taking so long! Along with the changes in code highlight.js has finally got its new home at http://highlightjs.org/ , moving from its cradle on Software Maniacs which it outgrew a long time ago. Be sure to report any bugs about the site to . On to what's new\u2026 New languages: Handlebars templates by Robin Ward Oracle Rules Language by Jason Jacobson F# by Joans Folles\u00f8 AsciiDoc and Haml by Dan Allen Lasso by Eric Knibbe SCSS by Kurt Emch VB.NET by Poren Chiang Mizar by Kelley van Evert New style themes: Monokai Sublime by noformnocontent Railscasts by Damien White Obsidian by Alexander Marenin Docco by Simon Madine Mono Blue by Ivan Sagalaev (uses a single color hue for everything) Foundation by Dan Allen Other notable changes: Corrected many corner cases in CSS. Dropped Python 2 version of the build tool. Implemented building for the AMD format. Updated Rust keywords (thanks to Dmitry Medvinsky ). Literal regexes can now be used in language definitions. CoffeeScript highlighting is now significantly more robust and rich due to input from C\u00e9dric N\u00e9h\u00e9mie . Version 7.3 Since this version highlight.js no longer works in IE version 8 and older. It's made it possible to reduce the library size and dramatically improve code readability and made it easier to maintain. Time to go forward! New languages: AppleScript (by Nathan Grigg and Dr. Drang ) and Brainfuck (by Evgeny Stepanischev ). Improvements to existing languages: interpreter prompt in Python ( and ... ) @-properties and classes in CoffeeScript E4X in JavaScript (by Oleg Efimov ) new keywords in Perl (by Kirk Kimmel ) big Ruby syntax update (by Vasily Polovnyov ) small fixes in Bash Also Oleg Efimov did a great job of moving all the docs for language and style developers and contributors from the old wiki under the source code in the \"docs\" directory. Now these docs are nicely presented at http://highlightjs.readthedocs.org/ . Version 7.2 A regular bug-fix release without any significant new features. Enjoy! Version 7.1 A Summer crop: Marc Fornos made the definition for Clojure along with the matching style Rainbow (which, of course, works for other languages too). CoffeeScript support continues to improve getting support for regular expressions. Yoshihide Jimbo ported to highlight.js five Tomorrow styles from the project by Chris Kempson . Thanks to Casey Duncun the library can now be built in the popular AMD format . And last but not least, we've got a fair number of correctness and consistency fixes, including a pretty significant refactoring of Ruby. Version 7.0 The reason for the new major version update is a global change of keyword syntax which resulted in the library getting smaller once again. For example, the hosted build is 2K less than at the previous version while supporting two new languages. Notable changes: The library now works not only in a browser but also with node.js . It is installable with npm install highlight.js . API docs are available on our wiki. The new unique feature (apparently) among syntax highlighters is highlighting HTTP headers and an arbitrary language in the request body. The most useful languages here are XML and JSON both of which highlight.js does support. Here's the detailed post about the feature. Two new style themes: a dark \"south\" Pojoaque by Jason Tate and an emulation of*XCode* IDE by Angel Olloqui . Three new languages: D by Aleksandar Ru\u017ei\u010di\u0107 , R by Joe Cheng and GLSL by Sergey Tikhomirov . Nginx syntax has become a million times smaller and more universal thanks to remaking it in a more generic manner that doesn't require listing all the directives in the known universe. Function titles are now highlighted in PHP . Haskell and VHDL were significantly reworked to be more rich and correct by their respective maintainers Jeremy Hull and Igor Kalnitsky . And last but not least, many bugs have been fixed around correctness and language detection. Overall highlight.js currently supports 51 languages and 20 style themes. Version 6.2 A lot of things happened in highlight.js since the last version! We've got nine new contributors, the discussion group came alive, and the main branch on GitHub now counts more than 350 followers. Here are most significant results coming from all this activity: 5 (five!) new languages: Rust, ActionScript, CoffeeScript, MatLab and experimental support for markdown. Thanks go to Andrey Vlasovskikh , Alexander Myadzel , Dmytrii Nagirniak , Oleg Efimov , Denis Bardadym and John Crepezzi . 2 new style themes: Monokai by Luigi Maselli and stylistic imitation of another well-known highlighter Google Code Prettify by Aahan Krish . A vast number of correctness fixes and code refactorings , mostly made by Oleg Efimov and Evgeny Stepanischev . Version 6.1 \u2014 Solarized Jeremy Hull has implemented my dream feature \u2014 a port of Solarized style theme famous for being based on the intricate color theory to achieve correct contrast and color perception. It is now available for highlight.js in both variants \u2014 light and dark. This version also adds a new original style Arta. Its author pumbur maintains a heavily modified fork of highlight.js on GitHub. Version 6.0 New major version of the highlighter has been built on a significantly refactored syntax. Due to this it's even smaller than the previous one while supporting more languages! New languages are: Haskell by Jeremy Hull Erlang in two varieties \u2014 module and REPL \u2014 made collectively by Nikolay Zakharov , Dmitry Kovega and Sergey Ignatov Objective C by Valerii Hiora Vala by Antono Vasiljev Go by Stephan Kountso Also this version is marginally faster and fixes a number of small long-standing bugs. Developer overview of the new language syntax is available in a blog post about recent beta release . P.S. New version is not yet available on a Yandex CDN, so for now you have to download your own copy . Version 5.14 Fixed bugs in HTML/XML detection and relevance introduced in previous refactoring. Also test.html now shows the second best result of language detection by relevance. Version 5.13 Past weekend began with a couple of simple additions for existing languages but ended up in a big code refactoring bringing along nice improvements for language developers. For users Description of C++ has got new keywords from the upcoming C++ 0x standard. Description of HTML has got new tags from HTML 5 . CSS-styles have been unified to use consistent padding and also have lost pop-outs with names of detected languages. Igor Kalnitsky has sent two new language descriptions: CMake VHDL. This makes total number of languages supported by highlight.js to reach 35. Bug fixes: Custom classes on pre tags are not being overridden anymore More correct highlighting of code blocks inside non- pre containers: highlighter now doesn't insist on replacing them with its own container and just replaces the contents. Small fixes in browser compatibility and heuristics. For developers The most significant change is the ability to include language submodes right under contains instead of defining explicit named submodes in the main array: contains: [ string , number , {begin: \\\\n , end: hljs.IMMEDIATE_RE} ] This is useful for auxiliary modes needed only in one place to define parsing. Note that such modes often don't have className and hence won't generate a separate span in the resulting markup. This is similar in effect to noMarkup: true . All existing languages have been refactored accordingly. Test file test.html has at last become a real test. Now it not only puts the detected language name under the code snippet but also tests if it matches the expected one. Test summary is displayed right above all language snippets. CDN Fine people at Yandex agreed to host highlight.js on their big fast servers. Link up ! Version 5.10 \u2014 \"Paris\". Though I'm on a vacation in Paris, I decided to release a new version with a couple of small fixes: Tomas Vitvar discovered that TAB replacement doesn't always work when used with custom markup in code SQL parsing is even more rigid now and doesn't step over SmallTalk in tests Version 5.9 A long-awaited version is finally released. New languages: Andrew Fedorov made a definition for Lua a long-time highlight.js contributor Peter Leonov made a definition for Nginx config Vladimir Moskva made a definition for TeX Fixes for existing languages: Loren Segal reworked the Ruby definition and added highlighting for YARD inline documentation the definition of SQL has become more solid and now it shouldn't be overly greedy when it comes to language detection The highlighter has become more usable as a library allowing to do highlighting from initialization code of JS frameworks and in ajax methods (see. readme.eng.txt). Also this version drops support for the WordPress plugin. Everyone is welcome to pick up its maintenance if needed. Version 5.8 Jan Berkel has contributed a definition for Scala. +1 to hotness! All CSS-styles are rewritten to work only inside pre tags to avoid conflicts with host site styles. Version 5.7. Fixed escaping of quotes in VBScript strings. Version 5.5 This version brings a small change: now .ini-files allow digits, underscores and square brackets in key names. Version 5.4 Fixed small but upsetting bug in the packer which caused incorrect highlighting of explicitly specified languages. Thanks to Andrew Fedorov for precise diagnostics! Version 5.3 The version to fulfil old promises. The most significant change is that highlight.js now preserves custom user markup in code along with its own highlighting markup. This means that now it's possible to use, say, links in code. Thanks to Vladimir Dolzhenko for the initial proposal and for making a proof-of-concept patch. Also in this version: Vasily Polovnyov has sent a GitHub-like style and has implemented support for CSS @-rules and Ruby symbols. Yura Zaripov has sent two styles: Brown Paper and School Book. Oleg Volchkov has sent a definition for Parser 3 . Version 5.2 at last it's possible to replace indentation TABs with something sensible (e.g. 2 or 4 spaces) new keywords and built-ins for 1C by Sergey Baranov a couple of small fixes to Apache highlighting Version 5.1 This is one of those nice version consisting entirely of new and shiny contributions! Vladimir Ermakov created highlighting for AVR Assembler Ruslan Keba created highlighting for Apache config file. Also his original visual style for it is now available for all highlight.js languages under the name \"Magula\". Shuen-Huei Guan (aka Drake) sent new keywords for RenderMan languages. Also thanks go to Konstantin Evdokimenko for his advice on the matter. Version 5.0 The main change in the new major version of highlight.js is a mechanism for packing several languages along with the library itself into a single compressed file. Now sites using several languages will load considerably faster because the library won't dynamically include additional files while loading. Also this version fixes a long-standing bug with Javascript highlighting that couldn't distinguish between regular expressions and division operations. And as usually there were a couple of minor correctness fixes. Great thanks to all contributors! Keep using highlight.js. Version 4.3 This version comes with two contributions from Jason Diamond : language definition for C# (yes! it was a long-missed thing!) Visual Studio-like highlighting style Plus there are a couple of minor bug fixes for parsing HTML and XML attributes. Version 4.2 The biggest news is highlighting for Lisp, courtesy of Vasily Polovnyov. It's somewhat experimental meaning that for highlighting \"keywords\" it doesn't use any pre-defined set of a Lisp dialect. Instead it tries to highlight first word in parentheses wherever it makes sense. I'd like to ask people programming in Lisp to confirm if it's a good idea and send feedback to the forum . Other changes: Smalltalk was excluded from DEFAULT_LANGUAGES to save traffic Vladimir Epifanov has implemented javascript style switcher for test.html comments now allowed inside Ruby function definition MEL language from Shuen-Huei Guan whitespace now allowed between pre and code better auto-detection of C++ and PHP HTML allows embedded VBScript ( % .. % ) Version 4.1 Languages: Bash from Vah DOS bat-files from Alexander Makarov (Sam) Diff files from Vasily Polovnyov Ini files from myself though initial idea was from Sam Styles: Zenburn from Vladimir Epifanov, this is an imitation of a well-known theme for Vim . Ascetic from myself, as a realization of ideals of non-flashy highlighting: just one color in only three gradations :-) In other news. One small bug was fixed, built-in keywords were added for Python and C++ which improved auto-detection for the latter (it was shame that my wife's blog had issues with it from time to time). And lastly thanks go to Sam for getting rid of my stylistic comments in code that were getting in the way of JSMin . Version 4.0 New major version is a result of vast refactoring and of many contributions. Visible new features: Highlighting of embedded languages. Currently is implemented highlighting of Javascript and CSS inside HTML. Bundled 5 ready-made style themes! Invisible new features: Highlight.js no longer pollutes global namespace. Only one object and one function for backward compatibility. Performance is further increased by about 15%. Changing of a major version number caused by a new format of language definition files. If you use some third-party language files they should be updated. Version 3.5 A very nice version in my opinion fixing a number of small bugs and slightly increased speed in a couple of corner cases. Thanks to everybody who reports bugs in he forum and by email! There is also a new language \u2014 XML. A custom XML formerly was detected as HTML and didn't highlight custom tags. In this version I tried to make custom XML to be detected and highlighted by its own rules. Which by the way include such things as CDATA sections and processing instructions ( ? ... ? ). Version 3.3 Vladimir Gubarkov has provided an interesting and useful addition. File export.html contains a little program that shows and allows to copy and paste an HTML code generated by the highlighter for any code snippet. This can be useful in situations when one can't use the script itself on a site. Version 3.2 consists completely of contributions: Vladimir Gubarkov has described SmallTalk Yuri Ivanov has described 1C Peter Leonov has packaged the highlighter as a Firefox extension Vladimir Ermakov has compiled a mod for phpBB Many thanks to you all! Version 3.1 Three new languages are available: Django templates, SQL and Axapta. The latter two are sent by Dmitri Roudakov . However I've almost entirely rewrote an SQL definition but I'd never started it be it from the ground up :-) The engine itself has got a long awaited feature of grouping keywords (\"keyword\", \"built-in function\", \"literal\"). No more hacks! Version 3.0 It is major mainly because now highlight.js has grown large and has become modular. Now when you pass it a list of languages to highlight it will dynamically load into a browser only those languages. Also: Konstantin Evdokimenko of RibKit project has created a highlighting for RenderMan Shading Language and RenderMan Interface Bytestream. Yay for more languages! Heuristics for C++ and HTML got better. I've implemented (at last) a correct handling of backslash escapes in C-like languages. There is also a small backwards incompatible change in the new version. The function initHighlighting that was used to initialize highlighting instead of initHighlightingOnLoad a long time ago no longer works. If you by chance still use it \u2014 replace it with the new one. Version 2.9 Highlight.js is a parser, not just a couple of regular expressions. That said I'm glad to announce that in the new version 2.9 has support for: in-string substitutions for Ruby -- #{...} strings from from numeric symbol codes (like #XX) for Delphi Version 2.8 A maintenance release with more tuned heuristics. Fully backwards compatible. Version 2.7 Nikita Ledyaev presents highlighting for VBScript, yay! A couple of bugs with escaping in strings were fixed thanks to Mickle Ongoing tuning of heuristics Fixed bugs were rather unpleasant so I encourage everyone to upgrade! Version 2.4 Peter Leonov provides another improved highlighting for Perl Javascript gets a new kind of keywords \u2014 \"literals\". These are the words \"true\", \"false\" and \"null\" Also highlight.js homepage now lists sites that use the library. Feel free to add your site by dropping me a message until I find the time to build a submit form. Version 2.3 This version fixes IE breakage in previous version. My apologies to all who have already downloaded that one! Version 2.2 added highlighting for Javascript at last fixed parsing of Delphi's escaped apostrophes in strings in Ruby fixed highlighting of keywords 'def' and 'class', same for 'sub' in Perl Version 2.0 Ruby support by Anton Kovalyov speed increased by orders of magnitude due to new way of parsing this same way allows now correct highlighting of keywords in some tricky places (like keyword \"End\" at the end of Delphi classes) Version 1.0 Version 1.0 of javascript syntax highlighter is released! It's the first version available with English description. Feel free to post your comments and question to highlight.js forum . And don't be afraid if you find there some fancy Cyrillic letters -- it's for Russian users too :-)","title":"CHANGES"},{"location":"highlight/CHANGES/#version-9120","text":"New language: MikroTik RouterOS Scripting language by Ivan Dementev . New style: VisualStudio 2015 Dark by Nicolas LLOBERA Improvements: Crystal updated with new keywords and syntaxes by Tsuyusato Kitsune . Julia updated to the modern definitions by Alex Arslan . julia-repl added by Morten Piibeleht . Stanislav Belov wrote a new definition for 1C , replacing the one that has not been updated for more than 8 years. The new version supports syntax for versions 7.7 and 8. Nicolas LLOBERA improved C# definition fixing edge cases with function titles detection and added highlighting of [Attributes] . nnnik provided a few correctness fixes for Autohotkey . Martin Clausen made annotation collections in Clojure to look consistently with other kinds. Alejandro Alonso updated Swift keywords.","title":"Version 9.12.0"},{"location":"highlight/CHANGES/#version-9110","text":"New languages: Shell by Tsuyusato Kitsune jboss-cli by Rapha\u00ebl Parr\u00ebe Improvements: [Jo\u00ebl Porquet] has greatly improved the definition of makefile . C++ class titles are now highlighted as in other languages with classes. Jordi Petit added rarely used or , and and not keywords to C++ . Pieter Vantorre fixed highlighting of negative floating point values.","title":"Version 9.11.0"},{"location":"highlight/CHANGES/#version-9100","text":"Apologies for missing the previous release cycle. Some thing just can't be automated\u2026 Anyway, we're back! New languages: Hy by Sergey Sobko Leaf by Hale Chan N1QL by Andres T\u00e4ht and Rene Saarsoo Improvements: Rust got updated with new keywords by Kasper Andersen and then significantly modernized even more by Eduard-Mihai Burtescu (yes, @eddyb, Rust core team member!) Python updated with f-literals by Philipp A . YAML updated with unquoted strings support. Gauss updated with new keywords by Matt Evans . Lua updated with new keywords by Joe Blow . Kotlin updated with new keywords by Philipp Hauer . TypeScript got highlighting of function params and updated keywords by Ike Ku . Scheme now correctly handles `-quoted lists thanks to Guannan Wei . Sam Wu fixed handling of in C++ defines.","title":"Version 9.10.0"},{"location":"highlight/CHANGES/#version-990","text":"New languages LLVM by Michael Rodler Improvements: TypeScript updated with annotations and param lists inside constructors, by Raphael Parree . CoffeeScript updated with new keywords and fixed to recognize JavaScript in ```, thanks to thanks to Geoffrey Booth . Compiler directives in Delphi are now correctly highlighted as \"meta\".","title":"Version 9.9.0"},{"location":"highlight/CHANGES/#version-980-new-york","text":"This version is the second one that deserved a name. Because I'm in New York, and the release isn't missing the deadline only because it's still Tuesday on West Coast. New languages: Clean by Camil Staps Flix by Magnus Madsen Improvements: Kenton Hamaluik did a comprehensive update for Haxe . New commands for PowerShell from Nicolas Le Gall . Jan T. Sott updated NSIS . Java and Swift support unicode characters in identifiers thanks to Alexander Lichter .","title":"Version 9.8.0 \"New York\""},{"location":"highlight/CHANGES/#version-970","text":"A comprehensive bugfix release. This is one of the best things about highlight.js: even boring things keep getting better (even if slow). VHDL updated with PSL keywords and uses more consistent styling. Nested C-style comments no longer break highlighting in many languages. JavaScript updated with = functions, highlighted object attributes and parsing within template string substitution blocks ( ${...} ). Fixed another corner case with self-closing tag/ in JSX. Added HEALTHCHECK directive in Docker. Delphi updated with new Free Pascal keywords. Fixed digit separator parsing in C++. C# updated with new keywords and fixed to allow multiple identifiers within generics ... . Fixed another slow regex in Less.","title":"Version 9.7.0"},{"location":"highlight/CHANGES/#version-960","text":"New languages: ABNF and EBNF by Alex McKibben Awk by Matthew Daly SubUnit by Sergey Bronnikov New styles: Atom One in both Dark and Light variants by Daniel Gamage Plus, a few smaller updates for Lasso , Elixir , C++ and SQL .","title":"Version 9.6.0"},{"location":"highlight/CHANGES/#version-950","text":"New languages: Excel by Victor Zhou Linden Scripting Language by Builder's Brewery TAP (Test Anything Protocol) by Sergey Bronnikov Pony by Joe Eli McIlvain Coq by Stephan Boyer dsconfig and LDIF by Jacob Childress New styles: Ocean Dark by Gavin Siu Notable changes: Minh Nguy\u1ec5n added more built-ins to Objective C. Jeremy Hull fixed corner cases in C++ preprocessor directives and Diff comments. Victor Zhou added support for digit separators in C++ numbers.","title":"Version 9.5.0"},{"location":"highlight/CHANGES/#version-940","text":"New languages: PureBASIC by Tristano Ajmone BNF by Oleg Efimov Ada by Lars Schulna New styles: PureBASIC by Tristano Ajmone Improvements to existing languages and styles: We now highlight function declarations in Go. Taisuke Fujimoto contributed very convoluted rules for raw and interpolated strings in C#. Boone Severson updated Verilog to comply with IEEE 1800-2012 SystemVerilog. Victor Zhou improved rules for comments and strings in PowerShell files. Janis Voigtl\u00e4nder updated the definition of Elm to version 0.17 of the languages. Elm is now featured on the front page of https://highlightjs.org . Special variable $this is highlighted as a keyword in PHP. usize and isize are now highlighted in Rust. Fixed labels and directives in x86 assembler.","title":"Version 9.4.0"},{"location":"highlight/CHANGES/#version-930","text":"New languages: Tagger Script by Philipp Wolfer MoonScript by Billy Quith New styles: xt256 by Herbert Shin Improvements to existing languages and styles: More robust handling of unquoted HTML tag attributes Relevance tuning for QML which was unnecessary eager at seizing other languages' code Improve GAMS language parsing Fixed a bunch of bugs around selectors in Less Kotlin's got a new definition for annotations, updated keywords and other minor improvements Added move to Rust keywords Markdown now recognizes ```-fenced code blocks Improved detection of function declarations in C++ and C#","title":"Version 9.3.0"},{"location":"highlight/CHANGES/#version-920","text":"New languages: QML by John Foster HTMLBars by Michael Johnston CSP by Taras Maxima by Robert Dodier New styles: Gruvbox by Qeole Dracula by Denis Ciccale Improvements to existing languages and styles: We now correctly handle JSX with arbitrary node tree depth. Argument list for (lambda) in Scheme is no longer highlighted as a function call. Stylus syntax doesn't break on valid CSS. More correct handling of comments and strings and other improvements for VimScript. More subtle work on the default style. We now use anonymous modules for AMD. macro_rules! is now recognized as a built-in in Rust.","title":"Version 9.2.0"},{"location":"highlight/CHANGES/#version-910","text":"New languages: Stan by Brendan Rocks BASIC by Rapha\u00ebl Ass\u00e9nat GAUSS by Matt Evans DTS by Martin Braun Arduino by Stefania Mellai New Styles: Arduino Light by Stefania Mellai Improvements to existing languages and styles: Handle return type annotations in Python Allow shebang headers in Javascript Support strings in Rust meta Recognize struct as a class-level definition in Rust Recognize b-prefixed chars and strings in Rust Better numbers handling in Verilog","title":"Version 9.1.0"},{"location":"highlight/CHANGES/#version-900","text":"The new major version brings a reworked styling system. Highlight.js now defines a limited set of highlightable classes giving a consistent result across all the styles and languages. You can read a more detailed explanation and background in the tracking issue that started this long process back in May. This change is backwards incompatible for those who uses highlight.js with a custom stylesheet. The new style guide explains how to write styles in this new world. Bundled themes have also suffered a significant amount of improvements and may look different in places, but all the things now consistent and make more sense. Among others, the Default style has got a refresh and will probably be tweaked some more in next releases. Please do give your feedback in our issue tracker . New languages in this release: Cach\u00e9 Object Script by Nikita Savchenko YAML by Stefan Wienert MIPS Assembler by Nebuleon Fumika HSP by prince Improvements to existing languages and styles: ECMAScript 6 modules import now do not require closing semicolon. ECMAScript 6 classes constructors now highlighted. Template string support for Typescript, as for ECMAScript 6. Scala case classes params highlight fixed. Built-in names introduced in Julia v0.4 added by Kenta Sato . Refreshed Default style. Other notable changes: Web workers support added bu Jan K\u00fchle . We now have tests for compressed browser builds as well. The building tool chain has been switched to node.js 4.x. and is now shamelessly uses ES6 features all over the place, courtesy of Jeremy Hull . License added to non-compressed browser build.","title":"Version 9.0.0"},{"location":"highlight/CHANGES/#version-891","text":"Some last-minute changes reverted due to strange bug with minified browser build: Scala case classes params highlight fixed ECMAScript 6 modules import now do not require closing semicolon ECMAScript 6 classes constructors now highlighted Template string support for Typescript, as for ECMAScript 6 License added to not minified browser build","title":"Version 8.9.1"},{"location":"highlight/CHANGES/#version-890","text":"New languages: crmsh by Kristoffer Gronlund SQF by Soren Enevoldsen Notable fixes and improvements to existing languages: Added abstract and namespace keywords to TypeScript by Daniel Rosenwasser Added label support to Dockerfile by Ladislav Prskavec Crystal highlighting improved by Tsuyusato Kitsune Missing Swift keywords added by Nate Cook Improve detection of C block comments Scala case classes params highlight fixed ECMAScript 6 modules import now do not require closing semicolon ECMAScript 6 classes constructors now highlighted Template string support for Typescript, as for ECMAScript 6 Other notable changes: License added to not minified browser build","title":"Version 8.9.0"},{"location":"highlight/CHANGES/#version-880","text":"New languages: Golo by Philippe Charri\u00e8re GAMS by Stefan Bechert IRPF90 by Anthony Scemama Access logs by Oleg Efimov Crystal by Tsuyusato Kitsune Notable fixes and improvements to existing languages: JavaScript highlighting no longer fails with ES6 default parameters Added keywords async and await to Python PHP heredoc support improved Allow preprocessor directives within C++ functions Other notable changes: Change versions to X.Y.Z SemVer-compatible format Added ability to build all targets at once","title":"Version 8.8.0"},{"location":"highlight/CHANGES/#version-87","text":"New languages: Zephir by Oleg Efimov Elm by Janis Voigtl\u00e4nder XQuery by Dirk Kirsten Mojolicious by Dotan Dimet AutoIt by Manh Tuan from J2TeaM Toml (ini extension) by Guillaume Gomez New styles: Hopscotch by Jan T. Sott Grayscale by MY Sun Notable fixes and improvements to existing languages: Fix encoding of images when copied over in certain builds Fix incorrect highlighting of the word \"bug\" in comments Treat decorators different from matrix multiplication in Python Fix traits inheritance highlighting in Rust Fix incorrect document Oracle keywords added to SQL language definition by Vadimtro Postgres keywords added to SQL language definition by Benjamin Auder Fix registers in x86asm being highlighted as a hex number Fix highlighting for numbers with a leading decimal point Correctly highlight numbers and strings inside of C/C++ macros C/C++ functions now support pointer, reference, and move returns","title":"Version 8.7"},{"location":"highlight/CHANGES/#version-86","text":"New languages: C/AL by Kenneth Fuglsang DNS zone file by Tim Schumacher Ceylon by Lucas Werkmeister OpenSCAD by Dan Panzarella Inform7 by Bruno Dias armasm by Dan Panzarella TP by Jay Strybis New styles: Atelier Cave , Atelier Estuary , Atelier Plateau and Atelier Savanna by Bram de Haan Github Gist by Louis Barranqueiro Notable fixes and improvements to existing languages: Multi-line raw strings from C++11 are now supported Fix class names with dashes in HAML The async keyword from ES6/7 is now supported TypeScript functions handle type and parameter complexity better We unified phpdoc/javadoc/yardoc etc modes across all languages CSS .class selectors relevance was dropped to prevent wrong language detection Images is now included to CDN build Release process is now automated","title":"Version 8.6"},{"location":"highlight/CHANGES/#version-85","text":"New languages: pf.conf by Peter Piwowarski Julia by Kenta Sato Prolog by Raivo Laanemets Docker by Alexis H\u00e9naut Fortran by Anthony Scemama and Thomas Applencourt Kotlin by Sergey Mashkov New styles: Agate by Taufik Nurrohman Darcula by [JetBrains][] Atelier Sulphurpool by Bram de Haan Android Studio by Pedro Oliveira Notable fixes and improvements to existing languages: ES6 features in JavaScript are better supported now by Gu Yiling . Swift now recognizes body-less method definitions. Single expression functions def foo, do: ... now work in Elixir. More uniform detection of built-in classes in Objective C. Fixes for number literals and processor directives in Rust. HTML script tag now allows any language, not just JavaScript. Multi-line comments are supported now in MatLab.","title":"Version 8.5"},{"location":"highlight/CHANGES/#version-84","text":"We've got the new demo page ! The obvious new feature is the new look, but apart from that it's got smarter: by presenting languages in groups it avoids running 10000 highlighting attempts after first load which was slowing it down and giving bad overall impression. It is now also being generated from test code snippets so the authors of new languages don't have to update both tests and the demo page with the same thing. Other notable changes: The template_comment class is gone in favor of the more general comment . Number parsing unified and improved across languages. C++, Java and C# now use unified grammar to highlight titles in function/method definitions. The browser build is now usable as an AMD module, there's no separate build target for that anymore. OCaml has got a comprehensive overhaul by Micka\u00ebl Delahaye . Clojure's data structures and literals are now highlighted outside of lists and we can now highlight Clojure's REPL sessions. New languages: AspectJ by Hakan \u00d6zler STEP Part 21 by Adam Joseph Cook SML derived by Edwin Dalorzo from OCaml definition Mercury by mucaho Smali by Dennis Titze Verilog by Jon Evans Stata by Brian Quistorff","title":"Version 8.4"},{"location":"highlight/CHANGES/#version-83","text":"We streamlined our tool chain, it is now based entirely on node.js instead of being a mix of node.js, Python and Java. The build script options and arguments remained the same, and we've noted all the changes in the documentation . Apart from reducing complexity, the new build script is also faster from not having to start Java machine repeatedly. The credits for the work go to Jeremy Hull . Some notable fixes: PHP and JavaScript mixed in HTML now live happily with each other. JavaScript regexes now understand ES6 flags \"u\" and \"y\". throw keyword is no longer detected as a method name in Java. Fixed parsing of numbers and symbols in Clojure thanks to input from Ivan Kleshnin . New languages in this release: Less by Max Mikhailov Stylus by Bryant Williams Tcl by Radek Liska Puppet by Jose Molina Colmenero Processing by Erik Paluka Twig templates by Luke Holder PowerShell by David Mohundro , based on the work of Nicholas Blumhardt XL by Christophe de Dinechin LiveScript by Taneli Vatanen and Jen Evers-Corvina ERB (Ruby in HTML) by Lucas Mazza Roboconf by Vincent Zurczak","title":"Version 8.3"},{"location":"highlight/CHANGES/#version-82","text":"We've finally got real tests and continuous testing on Travis thanks to Jeremy Hull and Chris Eidhof . The tests designed to cover everything: language detection, correct parsing of individual language features and various special cases. This is a very important change that gives us confidence in extending language definitions and refactoring library core. We're going to redesign the old demo/test suite into an interactive demo web app. If you're confident front-end developer or designer and want to help us with it, drop a comment into the issue on GitHub. As usually there's a handful of new languages in this release: Groovy by Guillaume Laforge Dart by Maxim Dikun Dust by Michael Allen Scheme by JP Verkamp G-Code by Adam Joseph Cook Q from Kx Systems by Sergey Vidyuk Other improvements: Erik Osheim heavily reworked Scala definitions making it richer. Lucas Mazza fixed Ruby hashes highlighting Lisp variants (Lisp, Clojure and Scheme) are unified in regard to naming the first symbol in parentheses: it's \"keyword\" in general case and also \"built_in\" for built-in functions in Clojure and Scheme.","title":"Version 8.2"},{"location":"highlight/CHANGES/#version-81","text":"New languages: Gherkin by Sam Pikesley Elixir by Josh Adams NSIS by Jan T. Sott VIM script by Jun Yang Protocol Buffers by Dan Tao Nix by Domen Ko\u017ear x86asm by innocenat Cap\u2019n Proto and Thrift by Oleg Efimov Monkey by Arthur Bikmullin TypeScript by Panu Horsmalahti Nimrod by Flaviu Tamas Gradle by Damian Mee Haxe by Christopher Kaster Swift by Chris Eidhof and Nate Cook New styles: Kimbie , light and dark variants by Jan T. Sott Color brewer by Fabr\u00edcio Tavares de Oliveira Codepen.io embed by Justin Perry Hybrid by Nic West Other improvements: The README is heavily reworked and brought up to date by Jeremy Hull . Added listLanguages() method in the API. Improved C/C++/C# detection. Added a bunch of new language aliases, documented the existing ones. Thanks to Sindre Sorhus for background research. Added phrasal English words to boost relevance in comments. Many improvements to SQL definition made by Heiko August , Nikolay Lisienko and Travis Odom . The shorter lang- prefix for language names in HTML classes supported alongside language- . Thanks to Jeff Escalante . Ruby's got support for interactive console sessions. Thanks to Pascal Hurni . Added built-in functions for R language. Thanks to Artem A. Klevtsov . Rust's got definition for lifetime parameters and improved string syntax. Thanks to Roman Shmatov . Various improvements to Objective-C definition by Matt Diephouse . Fixed highlighting of generics in Java.","title":"Version 8.1"},{"location":"highlight/CHANGES/#version-80","text":"This new major release is quite a big overhaul bringing both new features and some backwards incompatible changes. However, chances are that the majority of users won't be affected by the latter: the basic scenario described in the README is left intact. Here's what did change in an incompatible way: We're now prefixing all classes located in CSS classes reference with hljs- , by default, because some class names would collide with other people's stylesheets. If you were using an older version, you might still want the previous behavior, but still want to upgrade. To suppress this new behavior, you would initialize like so: script type = text/javascript hljs . configure ({ classPrefix : }); hljs . initHighlightingOnLoad (); / script tabReplace and useBR that were used in different places are also unified into the global options object and are to be set using configure(options) . This function is documented in our API docs . Also note that these parameters are gone from highlightBlock and fixMarkup which are now also rely on configure . We removed public-facing (though undocumented) object hljs.LANGUAGES which was used to register languages with the library in favor of two new methods: registerLanguage and getLanguage . Both are documented in our API docs . Result returned from highlight and highlightAuto no longer contains two separate attributes contributing to relevance score, relevance and keyword_count . They are now unified in relevance . Another technically compatible change that nonetheless might need attention: The structure of the NPM package was refactored, so if you had installed it locally, you'll have to update your paths. The usual require('highlight.js') works as before. This is contributed by Dmitry Smolin . New features: Languages now can be recognized by multiple names like \"js\" for JavaScript or \"html\" for, well, HTML (which earlier insisted on calling it \"xml\"). These aliases can be specified in the class attribute of the code container in your HTML as well as in various API calls. For now there are only a few very common aliases but we'll expand it in the future. All of them are listed in the class reference . Language detection can now be restricted to a subset of languages relevant in a given context \u2014 a web page or even a single highlighting call. This is especially useful for node.js build that includes all the known languages. Another example is a StackOverflow-style site where users specify languages as tags rather than in the markdown-formatted code snippets. This is documented in the API reference (see methods highlightAuto and configure ). Language definition syntax streamlined with variants and beginKeywords . New languages and styles: Oxygene by Carlo Kok Mathematica by Daniel Kvasni\u010dka Autohotkey by Seongwon Lee Atelier family of styles in 10 variants by Bram de Haan Para\u00edso styles by Jan T. Sott Miscellaneous improvements: Highlighting = prompts in Clojure. Jeremy Hull fixed a lot of styles for consistency. Finally, highlighting PHP and HTML mixed in peculiar ways . Objective C and C# now properly highlight titles in method definition. Big overhaul of relevance counting for a number of languages. Please do report bugs about mis-detection of non-trivial code snippets!","title":"Version 8.0"},{"location":"highlight/CHANGES/#version-75","text":"A catch-up release dealing with some of the accumulated contributions. This one is probably will be the last before the 8.0 which will be slightly backwards incompatible regarding some advanced use-cases. One outstanding change in this version is the addition of 6 languages to the hosted script : Markdown, ObjectiveC, CoffeeScript, Apache, Nginx and Makefile. It now weighs about 6K more but we're going to keep it under 30K. New languages: OCaml by Mehdi Dogguy and Nicolas Braud-Santoni LiveCode Server by Ralf Bitter Scilab by Sylvestre Ledru basic support for Makefile by Ivan Sagalaev Improvements: Ruby's got support for characters like ?A , ?1 , ?\\012 etc. and %r{..} regexps. Clojure now allows a function call in the beginning of s-expressions (($filter myCount ) (arr 1 2 3 4 5)) . Haskell's got new keywords and now recognizes more things like pragmas, preprocessors, modules, containers, FFIs etc. Thanks to Zena Treep for the implementation and to Jeremy Hull for guiding it. Miscellaneous fixes in PHP, Brainfuck, SCSS, Asciidoc, CMake, Python and F#.","title":"Version 7.5"},{"location":"highlight/CHANGES/#new-core-developers","text":"The latest long period of almost complete inactivity in the project coincided with growing interest to it led to a decision that now seems completely obvious: we need more core developers. So without further ado let me welcome to the core team two long-time contributors: Jeremy Hull and Oleg Efimov . Hope now we'll be able to work through stuff faster! P.S. The historical commit is here for the record.","title":"New core developers"},{"location":"highlight/CHANGES/#version-74","text":"This long overdue version is a snapshot of the current source tree with all the changes that happened during the past year. Sorry for taking so long! Along with the changes in code highlight.js has finally got its new home at http://highlightjs.org/ , moving from its cradle on Software Maniacs which it outgrew a long time ago. Be sure to report any bugs about the site to . On to what's new\u2026 New languages: Handlebars templates by Robin Ward Oracle Rules Language by Jason Jacobson F# by Joans Folles\u00f8 AsciiDoc and Haml by Dan Allen Lasso by Eric Knibbe SCSS by Kurt Emch VB.NET by Poren Chiang Mizar by Kelley van Evert New style themes: Monokai Sublime by noformnocontent Railscasts by Damien White Obsidian by Alexander Marenin Docco by Simon Madine Mono Blue by Ivan Sagalaev (uses a single color hue for everything) Foundation by Dan Allen Other notable changes: Corrected many corner cases in CSS. Dropped Python 2 version of the build tool. Implemented building for the AMD format. Updated Rust keywords (thanks to Dmitry Medvinsky ). Literal regexes can now be used in language definitions. CoffeeScript highlighting is now significantly more robust and rich due to input from C\u00e9dric N\u00e9h\u00e9mie .","title":"Version 7.4"},{"location":"highlight/CHANGES/#version-73","text":"Since this version highlight.js no longer works in IE version 8 and older. It's made it possible to reduce the library size and dramatically improve code readability and made it easier to maintain. Time to go forward! New languages: AppleScript (by Nathan Grigg and Dr. Drang ) and Brainfuck (by Evgeny Stepanischev ). Improvements to existing languages: interpreter prompt in Python ( and ... ) @-properties and classes in CoffeeScript E4X in JavaScript (by Oleg Efimov ) new keywords in Perl (by Kirk Kimmel ) big Ruby syntax update (by Vasily Polovnyov ) small fixes in Bash Also Oleg Efimov did a great job of moving all the docs for language and style developers and contributors from the old wiki under the source code in the \"docs\" directory. Now these docs are nicely presented at http://highlightjs.readthedocs.org/ .","title":"Version 7.3"},{"location":"highlight/CHANGES/#version-72","text":"A regular bug-fix release without any significant new features. Enjoy!","title":"Version 7.2"},{"location":"highlight/CHANGES/#version-71","text":"A Summer crop: Marc Fornos made the definition for Clojure along with the matching style Rainbow (which, of course, works for other languages too). CoffeeScript support continues to improve getting support for regular expressions. Yoshihide Jimbo ported to highlight.js five Tomorrow styles from the project by Chris Kempson . Thanks to Casey Duncun the library can now be built in the popular AMD format . And last but not least, we've got a fair number of correctness and consistency fixes, including a pretty significant refactoring of Ruby.","title":"Version 7.1"},{"location":"highlight/CHANGES/#version-70","text":"The reason for the new major version update is a global change of keyword syntax which resulted in the library getting smaller once again. For example, the hosted build is 2K less than at the previous version while supporting two new languages. Notable changes: The library now works not only in a browser but also with node.js . It is installable with npm install highlight.js . API docs are available on our wiki. The new unique feature (apparently) among syntax highlighters is highlighting HTTP headers and an arbitrary language in the request body. The most useful languages here are XML and JSON both of which highlight.js does support. Here's the detailed post about the feature. Two new style themes: a dark \"south\" Pojoaque by Jason Tate and an emulation of*XCode* IDE by Angel Olloqui . Three new languages: D by Aleksandar Ru\u017ei\u010di\u0107 , R by Joe Cheng and GLSL by Sergey Tikhomirov . Nginx syntax has become a million times smaller and more universal thanks to remaking it in a more generic manner that doesn't require listing all the directives in the known universe. Function titles are now highlighted in PHP . Haskell and VHDL were significantly reworked to be more rich and correct by their respective maintainers Jeremy Hull and Igor Kalnitsky . And last but not least, many bugs have been fixed around correctness and language detection. Overall highlight.js currently supports 51 languages and 20 style themes.","title":"Version 7.0"},{"location":"highlight/CHANGES/#version-62","text":"A lot of things happened in highlight.js since the last version! We've got nine new contributors, the discussion group came alive, and the main branch on GitHub now counts more than 350 followers. Here are most significant results coming from all this activity: 5 (five!) new languages: Rust, ActionScript, CoffeeScript, MatLab and experimental support for markdown. Thanks go to Andrey Vlasovskikh , Alexander Myadzel , Dmytrii Nagirniak , Oleg Efimov , Denis Bardadym and John Crepezzi . 2 new style themes: Monokai by Luigi Maselli and stylistic imitation of another well-known highlighter Google Code Prettify by Aahan Krish . A vast number of correctness fixes and code refactorings , mostly made by Oleg Efimov and Evgeny Stepanischev .","title":"Version 6.2"},{"location":"highlight/CHANGES/#version-61-solarized","text":"Jeremy Hull has implemented my dream feature \u2014 a port of Solarized style theme famous for being based on the intricate color theory to achieve correct contrast and color perception. It is now available for highlight.js in both variants \u2014 light and dark. This version also adds a new original style Arta. Its author pumbur maintains a heavily modified fork of highlight.js on GitHub.","title":"Version 6.1 \u2014 Solarized"},{"location":"highlight/CHANGES/#version-60","text":"New major version of the highlighter has been built on a significantly refactored syntax. Due to this it's even smaller than the previous one while supporting more languages! New languages are: Haskell by Jeremy Hull Erlang in two varieties \u2014 module and REPL \u2014 made collectively by Nikolay Zakharov , Dmitry Kovega and Sergey Ignatov Objective C by Valerii Hiora Vala by Antono Vasiljev Go by Stephan Kountso Also this version is marginally faster and fixes a number of small long-standing bugs. Developer overview of the new language syntax is available in a blog post about recent beta release . P.S. New version is not yet available on a Yandex CDN, so for now you have to download your own copy .","title":"Version 6.0"},{"location":"highlight/CHANGES/#version-514","text":"Fixed bugs in HTML/XML detection and relevance introduced in previous refactoring. Also test.html now shows the second best result of language detection by relevance.","title":"Version 5.14"},{"location":"highlight/CHANGES/#version-513","text":"Past weekend began with a couple of simple additions for existing languages but ended up in a big code refactoring bringing along nice improvements for language developers.","title":"Version 5.13"},{"location":"highlight/CHANGES/#for-users","text":"Description of C++ has got new keywords from the upcoming C++ 0x standard. Description of HTML has got new tags from HTML 5 . CSS-styles have been unified to use consistent padding and also have lost pop-outs with names of detected languages. Igor Kalnitsky has sent two new language descriptions: CMake VHDL. This makes total number of languages supported by highlight.js to reach 35. Bug fixes: Custom classes on pre tags are not being overridden anymore More correct highlighting of code blocks inside non- pre containers: highlighter now doesn't insist on replacing them with its own container and just replaces the contents. Small fixes in browser compatibility and heuristics.","title":"For users"},{"location":"highlight/CHANGES/#for-developers","text":"The most significant change is the ability to include language submodes right under contains instead of defining explicit named submodes in the main array: contains: [ string , number , {begin: \\\\n , end: hljs.IMMEDIATE_RE} ] This is useful for auxiliary modes needed only in one place to define parsing. Note that such modes often don't have className and hence won't generate a separate span in the resulting markup. This is similar in effect to noMarkup: true . All existing languages have been refactored accordingly. Test file test.html has at last become a real test. Now it not only puts the detected language name under the code snippet but also tests if it matches the expected one. Test summary is displayed right above all language snippets.","title":"For developers"},{"location":"highlight/CHANGES/#cdn","text":"Fine people at Yandex agreed to host highlight.js on their big fast servers. Link up !","title":"CDN"},{"location":"highlight/CHANGES/#version-510-paris","text":"Though I'm on a vacation in Paris, I decided to release a new version with a couple of small fixes: Tomas Vitvar discovered that TAB replacement doesn't always work when used with custom markup in code SQL parsing is even more rigid now and doesn't step over SmallTalk in tests","title":"Version 5.10 \u2014 \"Paris\"."},{"location":"highlight/CHANGES/#version-59","text":"A long-awaited version is finally released. New languages: Andrew Fedorov made a definition for Lua a long-time highlight.js contributor Peter Leonov made a definition for Nginx config Vladimir Moskva made a definition for TeX Fixes for existing languages: Loren Segal reworked the Ruby definition and added highlighting for YARD inline documentation the definition of SQL has become more solid and now it shouldn't be overly greedy when it comes to language detection The highlighter has become more usable as a library allowing to do highlighting from initialization code of JS frameworks and in ajax methods (see. readme.eng.txt). Also this version drops support for the WordPress plugin. Everyone is welcome to pick up its maintenance if needed.","title":"Version 5.9"},{"location":"highlight/CHANGES/#version-58","text":"Jan Berkel has contributed a definition for Scala. +1 to hotness! All CSS-styles are rewritten to work only inside pre tags to avoid conflicts with host site styles.","title":"Version 5.8"},{"location":"highlight/CHANGES/#version-57","text":"Fixed escaping of quotes in VBScript strings.","title":"Version 5.7."},{"location":"highlight/CHANGES/#version-55","text":"This version brings a small change: now .ini-files allow digits, underscores and square brackets in key names.","title":"Version 5.5"},{"location":"highlight/CHANGES/#version-54","text":"Fixed small but upsetting bug in the packer which caused incorrect highlighting of explicitly specified languages. Thanks to Andrew Fedorov for precise diagnostics!","title":"Version 5.4"},{"location":"highlight/CHANGES/#version-53","text":"The version to fulfil old promises. The most significant change is that highlight.js now preserves custom user markup in code along with its own highlighting markup. This means that now it's possible to use, say, links in code. Thanks to Vladimir Dolzhenko for the initial proposal and for making a proof-of-concept patch. Also in this version: Vasily Polovnyov has sent a GitHub-like style and has implemented support for CSS @-rules and Ruby symbols. Yura Zaripov has sent two styles: Brown Paper and School Book. Oleg Volchkov has sent a definition for Parser 3 .","title":"Version 5.3"},{"location":"highlight/CHANGES/#version-52","text":"at last it's possible to replace indentation TABs with something sensible (e.g. 2 or 4 spaces) new keywords and built-ins for 1C by Sergey Baranov a couple of small fixes to Apache highlighting","title":"Version 5.2"},{"location":"highlight/CHANGES/#version-51","text":"This is one of those nice version consisting entirely of new and shiny contributions! Vladimir Ermakov created highlighting for AVR Assembler Ruslan Keba created highlighting for Apache config file. Also his original visual style for it is now available for all highlight.js languages under the name \"Magula\". Shuen-Huei Guan (aka Drake) sent new keywords for RenderMan languages. Also thanks go to Konstantin Evdokimenko for his advice on the matter.","title":"Version 5.1"},{"location":"highlight/CHANGES/#version-50","text":"The main change in the new major version of highlight.js is a mechanism for packing several languages along with the library itself into a single compressed file. Now sites using several languages will load considerably faster because the library won't dynamically include additional files while loading. Also this version fixes a long-standing bug with Javascript highlighting that couldn't distinguish between regular expressions and division operations. And as usually there were a couple of minor correctness fixes. Great thanks to all contributors! Keep using highlight.js.","title":"Version 5.0"},{"location":"highlight/CHANGES/#version-43","text":"This version comes with two contributions from Jason Diamond : language definition for C# (yes! it was a long-missed thing!) Visual Studio-like highlighting style Plus there are a couple of minor bug fixes for parsing HTML and XML attributes.","title":"Version 4.3"},{"location":"highlight/CHANGES/#version-42","text":"The biggest news is highlighting for Lisp, courtesy of Vasily Polovnyov. It's somewhat experimental meaning that for highlighting \"keywords\" it doesn't use any pre-defined set of a Lisp dialect. Instead it tries to highlight first word in parentheses wherever it makes sense. I'd like to ask people programming in Lisp to confirm if it's a good idea and send feedback to the forum . Other changes: Smalltalk was excluded from DEFAULT_LANGUAGES to save traffic Vladimir Epifanov has implemented javascript style switcher for test.html comments now allowed inside Ruby function definition MEL language from Shuen-Huei Guan whitespace now allowed between pre and code better auto-detection of C++ and PHP HTML allows embedded VBScript ( % .. % )","title":"Version 4.2"},{"location":"highlight/CHANGES/#version-41","text":"Languages: Bash from Vah DOS bat-files from Alexander Makarov (Sam) Diff files from Vasily Polovnyov Ini files from myself though initial idea was from Sam Styles: Zenburn from Vladimir Epifanov, this is an imitation of a well-known theme for Vim . Ascetic from myself, as a realization of ideals of non-flashy highlighting: just one color in only three gradations :-) In other news. One small bug was fixed, built-in keywords were added for Python and C++ which improved auto-detection for the latter (it was shame that my wife's blog had issues with it from time to time). And lastly thanks go to Sam for getting rid of my stylistic comments in code that were getting in the way of JSMin .","title":"Version 4.1"},{"location":"highlight/CHANGES/#version-40","text":"New major version is a result of vast refactoring and of many contributions. Visible new features: Highlighting of embedded languages. Currently is implemented highlighting of Javascript and CSS inside HTML. Bundled 5 ready-made style themes! Invisible new features: Highlight.js no longer pollutes global namespace. Only one object and one function for backward compatibility. Performance is further increased by about 15%. Changing of a major version number caused by a new format of language definition files. If you use some third-party language files they should be updated.","title":"Version 4.0"},{"location":"highlight/CHANGES/#version-35","text":"A very nice version in my opinion fixing a number of small bugs and slightly increased speed in a couple of corner cases. Thanks to everybody who reports bugs in he forum and by email! There is also a new language \u2014 XML. A custom XML formerly was detected as HTML and didn't highlight custom tags. In this version I tried to make custom XML to be detected and highlighted by its own rules. Which by the way include such things as CDATA sections and processing instructions ( ? ... ? ).","title":"Version 3.5"},{"location":"highlight/CHANGES/#version-33","text":"Vladimir Gubarkov has provided an interesting and useful addition. File export.html contains a little program that shows and allows to copy and paste an HTML code generated by the highlighter for any code snippet. This can be useful in situations when one can't use the script itself on a site.","title":"Version 3.3"},{"location":"highlight/CHANGES/#version-32-consists-completely-of-contributions","text":"Vladimir Gubarkov has described SmallTalk Yuri Ivanov has described 1C Peter Leonov has packaged the highlighter as a Firefox extension Vladimir Ermakov has compiled a mod for phpBB Many thanks to you all!","title":"Version 3.2 consists completely of contributions:"},{"location":"highlight/CHANGES/#version-31","text":"Three new languages are available: Django templates, SQL and Axapta. The latter two are sent by Dmitri Roudakov . However I've almost entirely rewrote an SQL definition but I'd never started it be it from the ground up :-) The engine itself has got a long awaited feature of grouping keywords (\"keyword\", \"built-in function\", \"literal\"). No more hacks!","title":"Version 3.1"},{"location":"highlight/CHANGES/#version-30","text":"It is major mainly because now highlight.js has grown large and has become modular. Now when you pass it a list of languages to highlight it will dynamically load into a browser only those languages. Also: Konstantin Evdokimenko of RibKit project has created a highlighting for RenderMan Shading Language and RenderMan Interface Bytestream. Yay for more languages! Heuristics for C++ and HTML got better. I've implemented (at last) a correct handling of backslash escapes in C-like languages. There is also a small backwards incompatible change in the new version. The function initHighlighting that was used to initialize highlighting instead of initHighlightingOnLoad a long time ago no longer works. If you by chance still use it \u2014 replace it with the new one.","title":"Version 3.0"},{"location":"highlight/CHANGES/#version-29","text":"Highlight.js is a parser, not just a couple of regular expressions. That said I'm glad to announce that in the new version 2.9 has support for: in-string substitutions for Ruby -- #{...} strings from from numeric symbol codes (like #XX) for Delphi","title":"Version 2.9"},{"location":"highlight/CHANGES/#version-28","text":"A maintenance release with more tuned heuristics. Fully backwards compatible.","title":"Version 2.8"},{"location":"highlight/CHANGES/#version-27","text":"Nikita Ledyaev presents highlighting for VBScript, yay! A couple of bugs with escaping in strings were fixed thanks to Mickle Ongoing tuning of heuristics Fixed bugs were rather unpleasant so I encourage everyone to upgrade!","title":"Version 2.7"},{"location":"highlight/CHANGES/#version-24","text":"Peter Leonov provides another improved highlighting for Perl Javascript gets a new kind of keywords \u2014 \"literals\". These are the words \"true\", \"false\" and \"null\" Also highlight.js homepage now lists sites that use the library. Feel free to add your site by dropping me a message until I find the time to build a submit form.","title":"Version 2.4"},{"location":"highlight/CHANGES/#version-23","text":"This version fixes IE breakage in previous version. My apologies to all who have already downloaded that one!","title":"Version 2.3"},{"location":"highlight/CHANGES/#version-22","text":"added highlighting for Javascript at last fixed parsing of Delphi's escaped apostrophes in strings in Ruby fixed highlighting of keywords 'def' and 'class', same for 'sub' in Perl","title":"Version 2.2"},{"location":"highlight/CHANGES/#version-20","text":"Ruby support by Anton Kovalyov speed increased by orders of magnitude due to new way of parsing this same way allows now correct highlighting of keywords in some tricky places (like keyword \"End\" at the end of Delphi classes)","title":"Version 2.0"},{"location":"highlight/CHANGES/#version-10","text":"Version 1.0 of javascript syntax highlighter is released! It's the first version available with English description. Feel free to post your comments and question to highlight.js forum . And don't be afraid if you find there some fancy Cyrillic letters -- it's for Russian users too :-)","title":"Version 1.0"},{"location":"highlight/README.ru/","text":"Highlight.js Highlight.js \u2014 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0438 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 JavaScript. \u041e\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435, \u0438 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u041e\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043b\u044e\u0431\u043e\u0439 HTML \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439, \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u0438 \u0443\u043c\u0435\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u044f\u0437\u044b\u043a. \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u041c\u0438\u043d\u0438\u043c\u0443\u043c, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f highlight.js \u043d\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u2014 \u044d\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443, CSS-\u0441\u0442\u0438\u043b\u0438 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c initHighlightingOnLoad : link rel = stylesheet href = /path/to/styles/default.css script src = /path/to/highlight.pack.js / script script hljs . initHighlightingOnLoad (); / script \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430\u0439\u0434\u0451\u0442 \u0438 \u0440\u0430\u0441\u043a\u0440\u0430\u0441\u0438\u0442 \u043a\u043e\u0434 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0435\u0433\u043e\u0432 pre code , \u043f\u043e\u043f\u044b\u0442\u0430\u0432\u0448\u0438\u0441\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044f\u0437\u044b\u043a. \u041a\u043e\u0433\u0434\u0430 \u0430\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442, \u043c\u043e\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u044f\u0437\u044b\u043a \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0435 class: pre code class = html ... / code / pre \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u044f\u0437\u044b\u043a\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0435 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0430\u043c . \u041a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u044c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438 language- \u0438\u043b\u0438 lang- . \u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0431\u043b\u043e\u043a\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 nohighlight : pre code class = nohighlight ... / code / pre \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0427\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0437\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 highlightBlock \u0438 configure . \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0435\u043c, \u0447\u0442\u043e \u0438 \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0434\u0441\u0432\u0435\u0447\u0438\u0432\u0430\u0442\u044c. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e\u0439 \u0432\u044b\u0437\u043e\u0432\u0443 initHighlightingOnLoad , \u043d\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jQuery: $ ( document ). ready ( function () { $ ( pre code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); }); \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0442\u0435\u0433\u0438 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0432\u043c\u0435\u0441\u0442\u043e pre code . \u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440, \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b \u0441\u0442\u0440\u043e\u043a, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c highlight.js \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043d\u0438\u0445 \u0442\u0435\u0433 br : hljs . configure ({ useBR : true }); $ ( div.code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); \u0414\u0440\u0443\u0433\u0438\u0435 \u043e\u043f\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 configure . Web Workers \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 web worker'\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u043a\u043d\u043e \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u043d\u0435 \u043f\u043e\u0434\u0442\u043e\u0440\u043c\u0430\u0436\u0438\u0432\u0430\u043b\u043e \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043a\u0443\u0441\u043a\u0430\u043c\u0438 \u043a\u043e\u0434\u0430. \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435: addEventListener ( load , function () { var code = document . querySelector ( #code ); var worker = new Worker ( worker.js ); worker . onmessage = function ( event ) { code . innerHTML = event . data ; } worker . postMessage ( code . textContent ); }) \u0412 worker.js: onmessage = function ( event ) { importScripts ( path /highlight.pack.js ); var result = self . hljs . highlightAuto ( event . data ); postMessage ( result . value ); } \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Highlight.js \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043f\u0440\u044f\u043c\u043e \u0441 CDN \u0445\u043e\u0441\u0442\u0438\u043d\u0433\u0430 \u0438\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0431\u043e\u0440\u043a\u0443, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u041d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b. \u041d\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 GitHub \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0438. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043d\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0441\u0431\u043e\u0440\u043a\u0435 . \u0424\u0430\u0439\u043b \u043d\u0430 CDN \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435 \u0432\u0441\u0435 \u044f\u0437\u044b\u043a\u0438. \u0418\u043d\u0430\u0447\u0435 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0432\u0430\u043c \u044f\u0437\u044b\u043a\u0430 \u043d\u0435\u0442 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \"Common\" , \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e: script src = //cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/go.min.js / script \u041f\u0440\u043e Almond. \u041d\u0443\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0438\u043c\u044f \u043c\u043e\u0434\u0443\u043b\u044f \u0432 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: r.js -o name=hljs paths.hljs=/path/to/highlight out=highlight.js \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f Highlight.js \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0434 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439 BSD. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b LICENSE . \u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 https://highlightjs.org/ . \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e API \u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0435\u043c\u0430\u043c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043d\u0430 http://highlightjs.readthedocs.io/ . \u0410\u0432\u0442\u043e\u0440\u044b \u0438 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0432 \u0444\u0430\u0439\u043b\u0435 AUTHORS.ru.txt file.","title":"Highlight.js"},{"location":"highlight/README.ru/#highlightjs","text":"Highlight.js \u2014 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0438 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 JavaScript. \u041e\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435, \u0438 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u041e\u043d \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043b\u044e\u0431\u043e\u0439 HTML \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439, \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u0438 \u0443\u043c\u0435\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u044f\u0437\u044b\u043a.","title":"Highlight.js"},{"location":"highlight/README.ru/#_1","text":"\u041c\u0438\u043d\u0438\u043c\u0443\u043c, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f highlight.js \u043d\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u2014 \u044d\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443, CSS-\u0441\u0442\u0438\u043b\u0438 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c initHighlightingOnLoad : link rel = stylesheet href = /path/to/styles/default.css script src = /path/to/highlight.pack.js / script script hljs . initHighlightingOnLoad (); / script \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430\u0439\u0434\u0451\u0442 \u0438 \u0440\u0430\u0441\u043a\u0440\u0430\u0441\u0438\u0442 \u043a\u043e\u0434 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0435\u0433\u043e\u0432 pre code , \u043f\u043e\u043f\u044b\u0442\u0430\u0432\u0448\u0438\u0441\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044f\u0437\u044b\u043a. \u041a\u043e\u0433\u0434\u0430 \u0430\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442, \u043c\u043e\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u044f\u0437\u044b\u043a \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0435 class: pre code class = html ... / code / pre \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u044f\u0437\u044b\u043a\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0435 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0430\u043c . \u041a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u044c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438 language- \u0438\u043b\u0438 lang- . \u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0431\u043b\u043e\u043a\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 nohighlight : pre code class = nohighlight ... / code / pre","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"highlight/README.ru/#_2","text":"\u0427\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0437\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 highlightBlock \u0438 configure . \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0435\u043c, \u0447\u0442\u043e \u0438 \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0434\u0441\u0432\u0435\u0447\u0438\u0432\u0430\u0442\u044c. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e\u0439 \u0432\u044b\u0437\u043e\u0432\u0443 initHighlightingOnLoad , \u043d\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jQuery: $ ( document ). ready ( function () { $ ( pre code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); }); \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0442\u0435\u0433\u0438 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0432\u043c\u0435\u0441\u0442\u043e pre code . \u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440, \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b \u0441\u0442\u0440\u043e\u043a, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c highlight.js \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043d\u0438\u0445 \u0442\u0435\u0433 br : hljs . configure ({ useBR : true }); $ ( div.code ). each ( function ( i , block ) { hljs . highlightBlock ( block ); }); \u0414\u0440\u0443\u0433\u0438\u0435 \u043e\u043f\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 configure .","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e"},{"location":"highlight/README.ru/#web-workers","text":"\u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 web worker'\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u043a\u043d\u043e \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u043d\u0435 \u043f\u043e\u0434\u0442\u043e\u0440\u043c\u0430\u0436\u0438\u0432\u0430\u043b\u043e \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043a\u0443\u0441\u043a\u0430\u043c\u0438 \u043a\u043e\u0434\u0430. \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435: addEventListener ( load , function () { var code = document . querySelector ( #code ); var worker = new Worker ( worker.js ); worker . onmessage = function ( event ) { code . innerHTML = event . data ; } worker . postMessage ( code . textContent ); }) \u0412 worker.js: onmessage = function ( event ) { importScripts ( path /highlight.pack.js ); var result = self . hljs . highlightAuto ( event . data ); postMessage ( result . value ); }","title":"Web Workers"},{"location":"highlight/README.ru/#_3","text":"Highlight.js \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043f\u0440\u044f\u043c\u043e \u0441 CDN \u0445\u043e\u0441\u0442\u0438\u043d\u0433\u0430 \u0438\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0431\u043e\u0440\u043a\u0443, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u041d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b. \u041d\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 GitHub \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0438. \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043d\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0441\u0431\u043e\u0440\u043a\u0435 . \u0424\u0430\u0439\u043b \u043d\u0430 CDN \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435 \u0432\u0441\u0435 \u044f\u0437\u044b\u043a\u0438. \u0418\u043d\u0430\u0447\u0435 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0432\u0430\u043c \u044f\u0437\u044b\u043a\u0430 \u043d\u0435\u0442 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \"Common\" , \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e: script src = //cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/go.min.js / script \u041f\u0440\u043e Almond. \u041d\u0443\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0438\u043c\u044f \u043c\u043e\u0434\u0443\u043b\u044f \u0432 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: r.js -o name=hljs paths.hljs=/path/to/highlight out=highlight.js","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"highlight/README.ru/#_4","text":"Highlight.js \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0434 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439 BSD. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b LICENSE .","title":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f"},{"location":"highlight/README.ru/#_5","text":"\u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 https://highlightjs.org/ . \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e API \u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0435\u043c\u0430\u043c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043d\u0430 http://highlightjs.readthedocs.io/ . \u0410\u0432\u0442\u043e\u0440\u044b \u0438 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0432 \u0444\u0430\u0439\u043b\u0435 AUTHORS.ru.txt file.","title":"\u0421\u0441\u044b\u043b\u043a\u0438"}]}